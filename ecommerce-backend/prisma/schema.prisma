generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Modelo para Usuarios
model User {
  id        Int      @id @default(autoincrement())
  name      String
  email     String   @unique
  password  String
  role      String   @default("user") // Roles: "user", "admin"
  points    Int      @default(0) // Sistema de recompensas
  orders    Order[] // Relación con pedidos
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Modelo para Productos
model Product {
  id                Int              @id @default(autoincrement())
  name              String
  description       String
  price             Float
  stock             Int              @default(0)
  lowStockThreshold Int              @default(5) // Límite de stock bajo
  category          String
  isHot             Boolean          @default(false)
  orders            OrderProduct[]
  promotions        Promotion[]
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
  InventoryAlert    InventoryAlert[]
  Alert             Alert[]
}

model InventoryAlert {
  id         Int      @id @default(autoincrement())
  productId  Int
  product    Product  @relation(fields: [productId], references: [id])
  message    String
  isResolved Boolean  @default(false)
  createdAt  DateTime @default(now())
}

// Modelo para Pedidos
model Order {
  id        Int            @id @default(autoincrement())
  userId    Int
  user      User           @relation(fields: [userId], references: [id])
  status    String         @default("Pending") // Estados: Pending, Preparing, Ready, Completed
  total     Float
  points    Int            @default(0) // Puntos generados por el pedido
  products  OrderProduct[]
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
}

// Relación entre Pedidos y Productos
model OrderProduct {
  id        Int      @id @default(autoincrement())
  orderId   Int
  productId Int
  quantity  Int // Cantidad del producto en el pedido
  order     Order    @relation(fields: [orderId], references: [id])
  product   Product  @relation(fields: [productId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Historial de Promociones
model Promotion {
  id        Int      @id @default(autoincrement())
  productId Int      @unique // Agregar esta línea para hacerlo único
  product   Product  @relation(fields: [productId], references: [id])
  discount  Float // Porcentaje de descuento
  duration  Int // Duración en horas
  expiresAt DateTime // Fecha y hora de expiración calculada
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Alert {
  id        Int      @id @default(autoincrement())
  productId Int // ID del producto relacionado
  message   String // Mensaje de la alerta
  role      String? // Rol destinatario (opcional)
  resolved  Boolean  @default(false) // Indicador de si fue resuelta
  createdAt DateTime @default(now()) // Fecha de creación
  Product   Product  @relation(fields: [productId], references: [id])
}